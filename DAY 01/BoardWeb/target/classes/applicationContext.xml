<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	<beans> 루트 엘리먼트
	스프링 컨테이너는 <bean> 저장소에 해당하는 XML 설정 파일을 참조하여 <bean>의 생명주기를 관리하고 여러 가지 서비스를 제공한다.
	따라서 스프링 프로젝트 전체에서 가장 중요한 역할을 담당하며, 이 설정 파일을 정확하게 작성하고 관리하는 것이 무엇보다 중요하다.
	스프링 설정 파일 이름은 무엇을 사용하든 상관없지만 <beans>를 루트 엘리먼트로 사용해야한다.
	그리고 <beans> 엘리먼트 시작 태그에 네임 스페이스를 비롯한 XML 스키마 관련 정보가 설정된다.
	STS를 이용하여 만든 스프링 설정 파일에는 beans 네임스페이스가 기본 네이스페이스로 선언되어 있으며, spring-beans.xsd 스키마 문서가 schemaLocation으로 등록되어 있다.
	따라서 <beans>, <description>, <alias>, <import> 등 네 개의 엘리먼트를 자식 엘리먼트로 사용할 수 있다.
	이 중에서 <bean>과 <import> 정도가 실제 프로젝트에 사용된다.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- TV 예제를 스프링 기반으로 테스트하기 위해서 SamsungTV 클래스를 스프링 설정 파일에 등록한다.
		 이 때 <bean> 엘리먼트를 사용하는데 클래스 하나당 하나의 <bean> 설정이 필요하다.
	 -->
	 <!-- class 속성에 패키지 경로가 포함된 전체 클래스 경로를 지정한다. -->
	 <!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true" init-method="initMethod" destroy-method="destroyMethod"/> --> 
	 
	 <!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singleton"></bean> -->
	 
	 <!-- DI -->
	 <bean id="tv" class="polymorphism.SamsungTV">
	 	<!-- 생성자에 매개변수로 전달할 값을 지정할 수 있다. 인자로 전달할 데이터가 객체이면 bean으로 등록된 객체 ref 속성 이용 -->
	 	<constructor-arg ref="apple" index="0"></constructor-arg>
	 	<!-- 고정된 문자열이나 정수 같은 기본형 데이터일 때는 value 속성을 사용한다. 
			생성자가 여러개 오버로딩 되어있다면 어떤 생성자를 호출해야 할지 분명하지 않을 수 있다. 이를 위해 index 속성을 지원하며, 어떤 값이 몇 번째 매개변수로 매핑되는지 지정할 수 있다.
	 	-->
	 	<constructor-arg value="270000" index="1"></constructor-arg>
	 </bean>
	 
	 <!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="" ></bean> -->
	 
	 <bean id="sony" class="polymorphism.SonySpeaker"></bean>
	 
	 <bean id="apple" class="polymorphism.AppleSpeaker"></bean>
	 
	 <bean id="LgTV" class="polymorphism.LgTV">
	 	<!-- Setter 인젝션은 <property> 엘리먼트 사용 name 속성값이 호출하고자 하는 메소드 이름이다. -->
		<property name="speaker" ref="apple"></property>
		<property name="price" value="270000"></property>
	 </bean>
	 
	 <!-- 
	 	스프링 컨테이너의 종류
	 	스프링에서는 BeanFactory와 이를 상속한 ApplicationContext 두 가지 유형의 컨테이너를 제공한다.
	 	먼저 BeanFactory는 스프링 설정 파일에 등록된 <bean> 객체를 생성하고 관리하는 가장 기본적인 컨테이너 기능만 제공한다.
	 	그리고 컨테이너가 구동될 때 <bean> 객체를 관리하는 가장 기본적인 컨테이너 기능만 제공한다.
	 	그리고 컨테이너가 구동될 때 <bean> 객체를 생성하는 것이 아니라, 클라이언트의 요청(Lookup)에 의해서만 <bean> 객체가 생성되는 지연 로딩(Lazy loading) 방식을 사용한다.
	 	따라서 일반적인 스프링 프로젝트에서 BeanFactory를 사용할 일은 전혀 없다.
	 	
	 	반면에 ApplicationContext는 BeanFactory가 제공하는 <bean> 객체 관리 기능 외에도 트랜잭션 관리나 메세지 기반의 다국어 처리 등 다양한 기능을 제공한다.
	 	또한, 컨테이너가 구동되는 시점에 <bean> 등록된 클래스들을 객체 생성하는 즉시 로딩(pre-loading) 방식으로 동작한다.
	 	그리고 웹 애플리케이션 개발도 지원하므로 대부분 스프링 프로젝트는 ApplicationContext 유형의 컨테이너를 이용한다.
	 	
	 	ApplicationContext의 구현 클래스는 매우 다양하다. 하지만 그 클래스들을 모두 살펴볼 수도 없거니와 의미도 없다.
	 	실제로 가장 많이 사용하는 두 개의 클래스만 알고 있으면 된다.
	 	
	 		구현 클래스 								기능
	 	GenericXmlApplicationContext : 파일 시스템이나 클래스 경로에 있는 XML 설정 파일을 로딩하여 구동하는 컨테이너이다.
	 	XmlWebApplicationContext : 웹 기반의 스프링 애플리케이션을 개발할 때 사용하는 컨테이너이다.
	 	
	 	GenericXmlApplicationContext는 실습에서 사용한 TVUser 클라이언트에서 직접 객체를 생성하여 구동한 컨테이너이다.
	 	하지만 XmlWebApplication은 웹 애플리케이션 개발에 사용되며, 우리가 직접 생성하지 않는 컨테이너이다.	 	
	  -->
	  
	  
	  <!-- 
	  		<import> 엘리먼트 
	  		스프링 설정 파일 하나아ㅔ 우리가 만든 모든 클래스를 <bean>으로 등록하고 관리할 수도 있다.
	  		하지만 스프링 기반의 애플리케이션은 단순한  <bean> 등록 이외에도 트랜잭션 관리, 예외처리, 다국어 처리등 복잡하고 다양한 설정이 필요하다.
	  		
	  		이런 모든 설정을 하나의 파일로 모두 처리할 수도 있지만, 그렇게 하면 스프링 설정파일이 너무 길어지고 관리도 어렵다.
	  		결국, 기능별 여러 XML 파일로 나누어 설정하는 것이 더 효율적인데, 이렇게 분리하여 작성한 설정파일들을 하나로 통합할 떄 <import> 엘리먼트를 사용한다.
	  -->
	  
	  
	  <!-- 
	  		<bean> 엘리먼트 
	  		스프링 설정 파일에 클래스를 등록하려면 <bean> 엘리먼트를 사용한다. 
	  		이때 id와 class 속성을 사용하는데, id 속성은 생략할 수 있지만, class속성은 필수이다.
	  		class 속성에 클래스를 등록할 때는 정확한 패키지 경로와 클래스 이름을 지정해야 한다.
	  		
	  		id 속성 없이 컨테이너만 구동하는데에는 문제가 없다.
	  		하지만 TVUser 클라이언트가 SamsungTV 객체를 요청(Lookup) 하려면 이름이 반드시 지정되어야 한다.
	  		이렇게 <bean> 객체를 위한 이름을 지정할 때 사용하는 속성이 id이다.
	  		id 속성은 컨테이너로부터 <bean> 객체를 요청할 때 사용하므로 반드시 스프링 컨테이너가 생성한 개체들 사이에서 유일해야한다.
	  		id 속성값에 해당하는 문자열은 자바의 식별자 작성 규칙을 따르며, 일반적으로 '낙타표기법(CamelCase)'을 사용한다
	  -->
	  
	  <!-- 
	  		<bean> 엘리먼트 속성
	  		(1) init-method 속성
	  		Servlet 컨테이너는 web.xml 파일에 등록된 Servlet 클래스의 객체를 생성할 때 디폴트 생성자만 인식한다.
	  		따라서 생성자로 Servlet 객체의 멤버변수를 초기화 할 수 없다. 
	  		그래서 서블릿은 init() 메소드를 재정의(Overring)하여 멤버변수를 초기화한다.
	  		
	  		스프링 컨테이너 역시 스프링 설정 파일에 등록된 클래스를 객체 생성할 때 디폴트 생성자를 호출한다.
	  		따라서 객체를 생성한 후에 멤버 변수 초기화 작업이 필요하다면, Servlet의 init() 같은 메소드가 필요하다.
	  		이를 위해 스프링에서는 <bean> 엘리먼트에 init-method 속성을 지원한다.
	  		init-method 속성으로 지정한 initMethod() 메소드를 호출한다.
	  		이 메소드에서 멤버 변수에 대한 초기화 작업을 처리한다.
	  		
	  		(2) destroy-method 속성
	  		init-method와 마찬가지로 <bean> 엘리먼트에서 destroy-method 속성을 이용하여 스프링 컨테이너가 객체를 삭제하기 직전에 호출될 임의의 메소드를 지정
	  		
	  		(3) lazy-init 속성
	  		ApplicationContext를 이용하여 컨테이너를 구동하면 컨테이너가 구동되는 시점에 스프링 설정 파일에 등록된 <bean>들을 생성하는 즉시 로딩(pre-loading) 방식으로 동작한다.
	  		그런데 어떤 <bean>은 자주 사용되지 않으면서 메모리를 많이 차지하여 시스템에 부담을 주는 경우도 있다.
	  		
	  		따라서 스프링에서는 컨테이너가 구동되는 시점이 아닌 해당 <bean>이 사용되는 시점에 객체를 생성하도록 init-lazy 속성을 제공한다.
	  		특정 <bean>을 등록할 때, lazy-init="true"로 설정하면 스프링 컨테이너는 해당 <bean>을 미리 생성하지 않고 클라이언트가 요청하는 시점에 생성한다.
	  		결국, 메모리 관리를 더 효율적으로 할 수 있게 된다.
	  		
	  		(4) scope 속성
	  		하나만 생성되도 상관없는 객체들이 있다. 하나의 객체만 생성해서 유지하려면 어떻게 해야 할까?
	  		우선 가장 쉬운 방법은 객체를 생성하고 주소를 복사하여 재사용하는 것이다.
	  		TV tv1 = new SamsungTV();
	  		TV tv2 = tv1;
	  		TV tv3 = tv2;
	  		결과적으로 tv1, tv2, tv3는 같은 주소를 가지므로 하나의 객체를 공유하게 된다.
	  		하지만 이렇게 프로그램 개발하는 것은 거의 불가능에 가깝다.
	  		결국은 자연스럽게 하나의 객체만 생성하도록 제어해야 하는데, 이때 사용하는 것이 GoF 디자인 패턴 중 하나인 '싱글톤 패턴'이다.
	  		그러나 싱글톤 패턴을 구현하려면 일일이 클래스에 패턴 관련 코드를 작성해야 하므로 귀찮다.
	  		
	  		결국, 클래스로부터 객체를 생성하는 쪽에서 자동으로 싱글톤 객체를 생성해주는 것이 가장 바람직하며, 스프링에서는 이런 기능을 컨테이너가 제공
	  		스프링 컨테이너는 컨테이너가 생성한  bean을 어느 범위에서 사용할 수 있는지를 지정할 수 있는데, 이때 scope 속성을 사용한다.
	  		scpoe 속성값은 기본이 싱글톤이다. 이는 해당 bean이 스프링 컨테이너에 의해 단 하나만 생성되어 운용되도록 한다.
	   -->
	   
	   <bean id="collectionBean"
	   		 class="com.springbook.ioc.injection.CollectionBean">
	   		<property name="addressList">
	   		<!-- setAddressList() 메소드를 호출할 때, 인자로 전달하여 addressList 멤버변수를 초기화하는 설정이다. -->
	   			<list>
	   				<value>서울시 강남구 역삼동</value>
	   				<value>서울시 성동구 행당동</value>
	   			</list>
	   		</property>
	   		
	   		<property name="addressListSet">
	   		<!-- setAddressListSet 메소드를 호출할 때, 문자열 타입의 데이터를 여러 개를 저장한 Set 컬렉션을 인자로 전달하겠다는 설정이다. 
	   			 중복된 것을 저장하지 않으므로 "대구시 수성구 범어동"은 하나의 주소만 저장된다.
	   		-->
	   			<set value-type="java.lang.String">
	   				<value>대구시 수성구 만촌동</value>
	   				<value>대구시 수성구 범어동</value>
	   				<value>대구시 수성구 범어동</value>
	   			</set>
	   		</property>
	   </bean>
	   
</beans>