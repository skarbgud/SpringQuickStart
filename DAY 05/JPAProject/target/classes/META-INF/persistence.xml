<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.1" xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
	<persistence-unit name="JPAProject">
		<class>com.springbook.biz.board.Board</class>
		
		<properties>
			<!-- 필수 속성 -->
			<property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>	<!-- JDBC 드라이버 클래스 -->
			<property name="javax.persistence.jdbc.user" value="sa" />	<!-- 데이터베이스의 아이디 -->
			<property name="javax.persistence.jdbc.password" value="" /> <!-- 데이터베이스의 비밀번호 -->
			<property name="javax.persistence.jdbc.url" value="jdbc:h2:tcp://localhost/~/test" /> <!-- JDBC URL 정보  -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect" />	<!-- Dialect 클래스 : 각 DBMS에 최적화된 SQL 구문을 생성  -->
			
			<!-- 옵션 -->
			<property name="hibernate.show_sql" value="true"/>	<!-- 생성된 SQL을 콘솔에 출력한다.  -->
			<property name="hibernate.format_sql" value="true" />	<!-- SQL을 출력할 때, 일정한 포맷으로 보기 좋게 출력한다.  -->
			<property name="hibernate.use_sql_comments" value="false" />	<!-- SQL에 포함된 주석도 같이 출력한다.  -->
			<property name="hibernate.id.new_generator_mappings" value="true" />	<!-- 새로운 키 생성 전략을 사용한다.  -->
			<property name="hibernate.hbm2ddl.auto" value="create" />	<!-- 테이블 생성이나 수정, 삭제 같은 DDL 구문을 자동으로 처리할지를 결정한다.  -->
																		<!--  ==> create : 애플리케이션을 실행할 때, 기존 테이블을 삭제하고, 엔티티 클래스에 설정된 매핑 설정을 참조
																							하여 새로운 테이블을 생성한다(DROP -> CREATE)
																				  create-drop : create와 같지만 애플리케이션이 종료되기 직전에 생성된 테이블을 삭제한다.
																				  				(DROP -> CREATE -> DROP)
																				  update : 기존에 사용중인 테이블이 있으면 새 테이블을 생성하지 않고 재사용한다. 만약 엔티티 클래스의 
																				  			매핑 설정이 변경되면 변경된 내용만 반영한다.(ALTER)-->
		</properties>
	</persistence-unit>
</persistence>
