<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean>
	
	<bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config>
		
	 <!-- DataSource 설정 -->
	 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	 	<property name="driverClassName" value="org.h2.Driver"></property>
	 	<property name="url" value="jdbc:h2:tcp://localhost/~/test" />
	 	<property name="username" value="sa" />
	 	<property name="password" value="" />
	 </bean>
	 
	 <!-- Spring JDBC 설정 -->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="dataSource" />
	 </bean>
	 
	 <!-- 
	 	스프링과 비교되는 EJB는 모든 비즈니스 메소드에 대한 트랜잭션 관리를 EJB 컨테이너가 자동으로 처리해준다.
		스프링에서도 EJB와 마찬가지로 트랜잭션 처리를 컨테이너가 자동으로 처리하도록 설정할 수 있는데, 이를 선언적 트랜잭션 처리
		
		스프링의 트랜잭션 설정에서는 앞에서 학습한 AOP가 사용된다. 그런데 XML 기반의 AOP설정만 사용할 수 있고, 어노테이션은
		사용할 수 없다. 그리고 애스펙트를 설정하는 것도 <aop:aspect> 엘리먼트를 사용하지 못하고 <aop:advisor> 엘리먼트를 사용
		한다. 이는 트랜잭션 관리에 사용되는 어드바이스가 독특하기 때문이다. 
	  -->	 
	 <!-- Transaction 설정 -->
	 <bean id="txManager" 
	 		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref="dataSource"></property>		
	 </bean>
	 
	 <!-- DataSourceTransactionManager도 PlatformTransactionManager의 commit(), rollback() 메소드를 재정의하여 구현할 뿐, 
	 	PlatformTransactionManger 객체 스스로 자신이 가진 메소드를 실행할 수 없다.
	 	어드바이스는 비즈니스 메소드 실행 전이나 후에 동작하여 비즈니스 메소드와 무관하게 공통 기능을 제공한다. 이 공통 기능 중에 대표적인 것이 예외처리와 트랜잭션 처리 이다.
	 	
	 	트랜잭션 관리 기능의 어드바이스는 <tx:advice> 엘리먼트를 사용하여 설정한다.
	  -->
	  <tx:advice id="txAdvice" transaction-manager="txManager">
	  	<tx:attributes>
	  		<tx:method name="get" read-only="true"/> <!-- get으로 시작하는 모든 메소드는 read-only="true" 즉, 읽기 전용으로 처리되어 트랜잭션 관리 대상에서 제외하고 나머지 메소드는 트랜잭션 관리에 포함 -->
	  		<tx:method name="*"/>
	  		<!-- <tx:method> 엘리먼트 속성
	  			name : 트랜잭션이 적용될 메소드 이름 지정
	  			read-only : 읽기 전용 여부 지정(기본값 false)
	  			no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정
	  			rollback-for : 트랜잭션을 롤백할 예외 지정 
	  		-->
	  	</tx:attributes>
	  </tx:advice>	  
	  <!-- 트랜잭션 관리 기능의 어드바이스는 직접 구현하지 않으며, 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 생성한다. -->
	  <!-- <aop:aspect> 엘리먼트를 사용하려면 포인트컷과 결합할 어드바이스 객체의 아이디와 어드바이스 메소드의 이름을 알아야 한다. 그래야지만 <aop:aspect> 엘리먼트를 사용할 수 있다.
	  		그러나 트랜잭션 관리 어드바이스는 우리가 직접 클래스를 구현하지 않고, <tx:advice> 설정 때문에 스프링 컨테이너가 자동으로 생성하므로 어드바이스 메소드를 알 수 없다.
	  		결국 어드바이스 메소드 이름을 몰라서 <aop:aspect> 엘리먼트를 사용할 수 없는 것이다.
	  		<aop:advisor>와 <aop:aspect>는 같은 기능의 엘리먼트.		
	   -->
	   <aop:config>
		   	<aop:pointcut id="txPointcut"
		   					expression="execution(* com.springbook.biz..*(..))"/>
		   	<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	   </aop:config>
	   
	   <!-- <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   		<property name="dataSource" ref="dataSource" />
	   		<property name="configLocation" value="classpath:sql-map-config.xml" />
	   </bean> -->
	   
	   <!-- Spring과 Mybatis 연동 설정 -->
	   <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	   		<property name="configLocation" value="classpath:sql-map-config.xml">
	   		</property>
	   		<property name="dataSource" ref="dataSource"></property>
	   </bean>
	   
	   <bean class="org.mybatis.spring.SqlSessionTemplate">
	   		<constructor-arg ref="sqlSession"/>
	   </bean>
</beans>