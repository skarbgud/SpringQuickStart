<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean>
	
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
		
	<!-- 
		<aop:aspectj-autoproxy> 엘리먼트 선언하면 AOP 관련 어노테이션들을 인식하고 용도에 맞게 처리해준다.
		AOP 관련 어노테이션들은 어드바이스 클래스에 설정한다. 그리고 어드바이스 클래스에 선언된 어노테이션들을 스프링
		컨테이너가 처리하게 하려면, 반드시 어드바이스 객체가 생성되어 있어야 한다. 따라서 어드바이스 클래스는 반드시 스프링
		설정 파일에 <bean> 등록하거나 @Service 어노테이션을 사용하여 컴포넌트가 검색될 수 있도록 한다.
	 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- 
		JdbcTemplate 클래스 
		- JdbcTemplate은 GoF 디자인 패턴 중 템플릿 메소드 패턴이 적용된 클래스이다.
		템플릿 메소드 패턴은 복잡하고 반복되는 알고리즘을 캡슐화해서 재사용하는 패턴
		템플릿 메소드 패턴을 이용하면 박복해서 사용되는 알고리즘을 템플릿 메소드로 캡슐화할 수 있어서 JDBC 처럼 코딩 순서가 정형화된 기술에 유용하게 사용
		따라서 반복되는 DB 연동 로직은 JdbcTemplate 클래스의 템플릿 메소드가 제공하고, 개발자는 달라지는 SQL 구문과 설정값만 신경쓰면 된다.
		
		JdbcTemplate은 JDBC의 반복적인 코드를 제거하기 위해 제공하는 클래스이다.
		따라서 DAO 클래스에서는 JdbcTemplate 클래스가 제공하는 템플릿 메소드를 호출하여 DB 연동을 간단하게 처리할 수 있다.
		그러면 JdbcTemplate 클래스는 내부적으로 JDBC API를 이용하여 실제 DB 연동 작업을 처리한다.
		하지만 JdbcTemplate 클래스가 어떻게 JDBC API를 이용하는지 DAO 클래스 개발자는 전혀 신경 쓸 필요가 없다.
	 -->
	 
	 <!-- 
	 	JdbcTemplate 클래스가 JDBC API를 이용하여 DB연동을 처리하려면 반드시 데이터베이스로부터 커넥션을 얻어야 한다.
	 	JdbcTemplate 객체가 사용할 DataSource를 <bean> 등록하여 스프링 컨테이너가 생성하도록 해야 한다.
	  -->
	 <!-- DataSource 설정 -->
	 <context:property-placeholder location="classpath:config/database.properties" />
	 
	 <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	 	<property name="driverClassName" value="${jdbc.driver}"></property>
	 	<property name="url" value="${jdbc.url}" />
	 	<property name="username" value="${jdbc.username}" />
	 	<property name="password" value="${jdbc.password}" />
	 </bean>
	 
	 <!-- Spring JDBC 설정 -->
	 <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	 	<property name="dataSource" ref="dataSource" />
	 </bean>
	 <!-- 
	 		JdbcTemplate 메소드
	 		1.update() 메소드
	 		ex-1) 메소드 int update(String sql, Object ..args)
	 		// 글 수정
	 		public void updateBoard(BoardVO vo){
	 			String BOARD_UPDATE = "update board set title=?, content=? where seq=?";
	 			int cnt = jdbcTemplate.update(BOARD_UPDATE, vo.getTitle(), vo.getContent(), vo.getSeq());
	 			System.out.println(cnt + "건 데이터 수정");
	 		}
	 		
	 		ex-2) 메소드 int update(String sql, Object[] args)
	 		// 글 수정
	 		public void updateBoard(BoardVO vo){
	 			String BOARD_UPDATE = "update board set title=?, content=? where seq=?";
	 			Object[] args = {vo.getTitle(), vo.getContent(), vo.getSeq()};
	 			int cnt = jdbcTemplate.update(BOARD_UPDATE, args);
	 			System.out.println(cnt + "건 데이터 수정");
	 		}
	 		
	 		2.queryForInt() 메소드
	 		SELECT 구문으로 검색된 정숫값으로 리턴받으려면 queryForInt() 메소드를 사용한다
	 		메소드 - int queryForInt(String sql)
	 			- int queryForInt(String sql, Object..args)
	 			- int queryForInt(String sql, Object[] args)
	 		ex) //전체 게시글 수 조회
	 			public int getBoardTotalCount(BoardVO vo) {
	 				String Board_TOT_COUNT = "select count(*) from board";
	 				int count = jdbcTemplate.queryForInt(BOARD_TOT_COUNT);
	 				System.out.println("전체 게시글 수: "+ count + "건");
	 			}
	 		
	 		3.queryForObject() 메소드
	 		queryForObject() 메소드는 SELECT 구문의 실행 결과를 특정 자바 객체로 매핑하여 리턴받을때 사용
	 		queryForObject()는 검색 결과가 업서나 검색 결과가 두 개 이상이면 예외를 발생시킨다.
	 		
	 		그리고 중요한 것은 검색 결과를 자바 객체로 매핑할 RowMapper 객체를 반드시 지정해야 한다.
	 		
	 		메소드 - Object queryForObject(String sql)
	 			- Object queryForObject(String sql, RowMapper<T> rowMapper)
	 			- Object queryForObject(String sql, Object[] args, RowMapper<T> rowMapper)
	 		ex) // 글 상세 조회
	 			public BoardVO getBoard(BoardVO vo) {
	 				String BOARD_GET = "select * from board where seq=?";
	 				Object[] args = {vo.getSeq()};
	 				return jdbcTemplate.queryForObject(BOARD_GET,args,new BoardRowMapper());
	 			}
	 		
	 		4. query() 메소드
	 		queryForObject()가 SELECT 문으로 객체 하나를 검색할 때 사용하는 메소드라면, query() 메소드는 SELECT 문의 실행
	 		결과가 목록일 때 사용한다. 기본 사용법은 queryForObject() 메소드와 같다. RowMapper객체 필요
	 		메소드 -List query(String sql)
	 			-List query(String sql, RowMapper<T> rowMapper)
	 			-List query(String sql, Object[] args, RowMapper<T> rowMapper)
	 		ex) // 글 목록 조회
	 			public List<BoardVO> getBoardList(BoardVO vo){
	 				String Board_LIST = "select * from board order by seq desc";
	 				return jdbcTemplate.query(BOARD_LIST, new BoardRowMapper());
	 			}
	 		
	  -->
</beans>