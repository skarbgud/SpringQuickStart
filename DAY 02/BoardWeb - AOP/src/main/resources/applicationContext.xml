<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean>
	
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean>
	
	<!-- 
		AOP 
	- 조인포인트(JoinPoint) : 클라이언트가 호출하는 모든 비즈니스 메소드
	- 포인트컷(Pointcut) : 필터링된 조인포인트
	- 어드바이스(Advice) : 공통 기능의 코드
	- 위빙(Weaving) : 포인트컷으로 지정한 핵심 관심 메소드가 호출될 때, 어드바이스에 해당하는 공통 관심 메소드가 삽입되는 과정
	-->
	
	<aop:config> <!-- AOP의 루트 엘리먼트 - 하위[pointcut, aspect]-->
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))"/>	<!-- 포인트컷을 지정하기 위해 사용 -->
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))"/>
														<!--*:리턴타입  com.springbook.biz.:패키지 경로 .*Impl:클래스명  get*(..):메소드명 및 매개변수-->
										
		<!-- 포인트 컷 표현식 
			1.리턴타입 지정
			* : 모든 리턴 타입 허용
			void : 리턴타입이 void인 메소드 선택
			!void : 리턴타입이 void가 아닌 메소드 선택
			
			2.패키지 지정
			com.springboo.biz : 정확하게 com.springboo.biz 패키지만 선택
			com.springboo.biz.. : com.springboo.biz 패키지로 시작하는 모든 패키지 선택
			com.springboo.biz..Impl : com.springboo.biz 패키지로 시작하면서 마지막 패키지 이름이 Imple로 끝나는 패키지 선택
			
			3.클래스 지정
			BoardServiceImpl : 정확하게BoardServiceImpl 클래스만 선택
			*Impl : 클래스 이름이 Impl로 끝나는 클래스만 선택
			BoardService+ : 클래스 이름 뒤에 '+'가 붙으면 해당 클래스로부터 파생된 모든 자식 클래스 선택, 인터페이스 뒤에 '+'가 붙으면 해당 인터페이스를 구현한 모든 클래스 선택
			
			4.메소드 지정
			*(..) : 가장 기본 설정으로 모든 메소드 선택
			get*(..) : 메소드 이름이 get으로 시작하는 모든 메소드 선택
			
			5.매개변수 지정
			(..) : 가장 기본 설정으로서 '..'은 매개변수의 개수와 타입에 제약이 없음을 의미
			(*) : 반드시 한개의 매개변수를 가지는 메소드만 선택
			(com.springbook.user.UserVO) : 매개변수로 UserVO를 가지는 메소드만 선택, 이떄 클래스의 패키지 경로가 반드시 포함되어야 함
			(!com.springbook.user.UserVO) : 매개변수로 UserVO를 가지지 않는 메소드만 선택
			(Integer,..) : 한개 이상의 매개변수를 가지도, 첫 번째 매개변수의 타입이 Integer인 메소드만 선택
			(Integer,*) : 반드시 두 개의 매개변수를 가지되, 첫 번째 매개변수의 타입이 Integer인 메소드만 선택
		 -->								
										
		<!-- aspect는 포인트컷과 어드바이스의 결합으로서 어떤 포인트컷 메소드에 어떤 어드바이스 메소드를 실행할지 결정한다. -->
		<aop:aspect ref="log">	<!-- aop:advisor 를 사용하는 경우는 트랜잭션을 사용할 때 (어드바이스는 확인되지만 메소드 이름을 확인할 방법이 없을때)-->
			<aop:after method="printLogging" pointcut-ref="getPointcut"/>
		</aop:aspect>					
	</aop:config>
	
	<!-- 
		어드바이스의 동작 시점
		Before : 비즈니스 메소드 실행 전 동작
		After : - After Returning : 비즈니스 메소드가 성공적으로 리턴되면 동작
				- After Throwing : 비즈니스 메소드 실행 중 예외가 발생하면(catch)
				- After : 비즈니스 메소드가 실행된 후, 무조건 실행(finally)
		Around : Around는 메소드 호출 자체를 가로체 비즈니스 메소드 실행 전후에 처리할 로직을 삽입할 수 있음
		
		어드바이스 메소드의 동작 시점 <aop:aspect> 엘리먼트 하위에 각각 <aop:before>, <aop:after-returning>, <aop:after-throwing>, <aop:after>, <after-around> 엘리먼트를
		이용하여 지정
		
	 -->
	 <bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	 
	 <aop:config>
	 	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
	 	
	 	<aop:aspect ref="before">
	 		<aop:before method="beforeLog" pointcut-ref="allPointcut"/>
	 	</aop:aspect>
	 </aop:config>
	 
	 <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice" />
	 
	 <aop:config>
	 	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
	 	
	 	<aop:aspect ref="afterReturning">
	 		<aop:after-returning method="afterLog" pointcut-ref="getPointcut"/>
	 	</aop:aspect>
	 </aop:config>
	 
	 <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" />
	 <bean id="after" class="com.springbook.biz.common.AfterAdvice" />
	 
	  <aop:config>
	 	<aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="allPointcut"/>
	 	
	 	<aop:aspect ref="afterThrowing">
	 		<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut"/>
	 	</aop:aspect>
	 	
	 	<aop:aspect ref="after">
	 		<aop:after method="finally" pointcut-ref="allPointcut"/>
	 	</aop:aspect>
	 </aop:config>
</beans>