<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<filter>
		<filter-name>characterEncoding</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>EUC-KR</param-value>
		</init-param>
	</filter>
	
	<filter-mapping>
		<filter-name>characterEncoding</filter-name>
		<url-pattern>*.do</url-pattern>
	</filter-mapping>
	
	<servlet>
		<servlet-name>action</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/config/presentation-layer.xml</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>action</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
	
	
	<!-- 
		클라이언트의 요청으로 DispatcherServlet 객체가 생성되고 나면 DispatcherServlet 클래그에 재정의된 init() 메소드가 자동으로
		실행되어 XmlWebApplicationContext라는 스프링 컨테이너가 구동된다.
		XmlWebApplicationContext는 ApplicationContext를 구현한 클래스 중 하나이다.
		XmlWebApplicationContext는 우리가 직접 생성하는 것이 아니라 DispatcherServlet이 생성한다.
		Spring MVC의 구성요소 중에서 DispatcherServlet 클래스가 유일한 서블릿이다.
		따라서 서블릿 컨테이너는 web.xml 파일에 등록된 DispatcherSerlvet만 생성해준다.
		하지만 DispatcherSerlvet 객체 혼자서는 클라이언트의 요청을 처리할 수 없고, 반드시 HandlerMapping, Controller, ViewResolver 객체들과
		상호작용해야 한다.
		이 객체들을 메모리에 생성하기 위해서 DispatcherSerlvet은 스프링 컨테이너를 구동하는 것이다.
	 -->
	 
	 <!-- 
	 	DispatcherSerlvet은 Spring 컨테이너를 구동할 때, web.xml 파일에 등록된 서블릿 이름 뒤에, '-servlet.xml'을 붙여서 스프링 설정파일을 
	 	찾는다. 따라서 web.xml 파일에 등록된 DispatcherServlet 이름이 dispatcher였다면 '/WEB-INF/dispatcher-servlet.xml'파일을 찾는다.
	  -->
	  
	  <!-- 
	  	DispatcherSerlvet은 자신이 사용할 객체들을 생성하기 위해서 스프링 컨테이너를 구동한다.
	  	이때 스프링 컨테이너를 위한 설정 파일의 이름과 위치는 서블릿 이름을 기준으로 자동으로 결정된다.
	  	하지만 필요에 따라서 설정 파일의 이름을 바꾸거나 위치를 변경할 수도 있다.
	  	이때 서블릿 초기화 파라미터를 이용하면 된다.
	   -->
	   
	   
	   <context-param>
	   		<param-name>contextConfigLocation</param-name>
	   		<param-value>classpath:applicationContext.xml</param-value>
	   </context-param>
	   
	   <listener>
	   		<listener-class>
	   			org.springframework.web.context.ContextLoaderListener	<!-- ContextLoaderListener 클래스는 서블릿 컨테이너가 구동될 때 자동으로 메모리에 생성된다. -->
	   		</listener-class>											<!-- 즉, 클라이언트의 요청이 없어도 컨테이너가 구동될 때 Pre-loading 되는 객체이다. -->		
	   </listener>														<!-- 기본적으로 /WEB-INF/applicationContext.xml 파일을 읽어 스프링 컨테이너 구동 -->
</web-app>
